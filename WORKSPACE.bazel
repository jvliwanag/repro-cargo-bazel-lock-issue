load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Rust
# See https://www.tweag.io/blog/2023-07-27-building-rust-workspace-with-bazel/
#

http_archive(
    name = "rules_rust",
    sha256 = "9ecd0f2144f0a24e6bc71ebcc50a1ee5128cedeceb32187004532c9710cb2334",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.29.1/rules_rust-v0.29.1.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = "2021",
    versions = ["1.73.0"],
)

load("@rules_rust//crate_universe:defs.bzl", "crate")
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crates_repository")

# To reload:
# $ CARGO_BAZEL_REPIN=1 bazel sync --only=crate_index
crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.lock",
    lockfile = "//:cargo-bazel-lock.json",
    manifests = [
        "//:Cargo.toml",
    ],
    annotations = {
        # Workaround for https://github.com/bazelbuild/rules_rust/issues/2212
        # We define all the features across platforms here
        "errno": [crate.annotation(
            crate_features = [
                "std",
            ],
        )],
        "libc": [crate.annotation(
            crate_features = [
                "extra_traits",
                "std",
            ],
        )],
        "linux-raw-sys": [crate.annotation(
            crate_features = [
                "elf",
                "errno",
                "general",
                "ioctl",
                "no_std",
            ],
        )],
    },
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()
